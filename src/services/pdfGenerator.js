// Professional PDF Generator using pdfmake
// Direct PDF downloads without build issues

// Professional PDF Generator for Property Brochures
export class PropertyPDFGenerator {
  constructor() {
    this.pdfMake = null
  }

  // Lazy load pdfmake to avoid build issues
  async loadPdfMake() {
    if (!this.pdfMake) {
      const pdfMake = await import('pdfmake/build/pdfmake')
      const pdfFonts = await import('pdfmake/build/vfs_fonts')
      pdfMake.default.vfs = pdfFonts.default.pdfMake.vfs
      this.pdfMake = pdfMake.default
    }
    return this.pdfMake
  }

  // Generate professional property PDF using pdfmake
  async generatePropertyPDF(property, agencyInfo = {}) {
    try {
      const pdfMake = await this.loadPdfMake()
      const docDefinition = this.createDocumentDefinition(property, agencyInfo)
      return pdfMake.createPdf(docDefinition)
    } catch (error) {
      console.error('Error generating PDF:', error)
      throw error
    }
  }

  createDocumentDefinition(property, agencyInfo) {
    const price = property.price ? `$${parseInt(property.price).toLocaleString()}` : 'Price on Request'
    const location = property.address || property.city || property.location || 'Prime Location'

    return {
      pageSize: 'A4',
      pageMargins: [40, 60, 40, 60],

      header: {
        columns: [
          {
            text: agencyInfo.name || 'LeadEstate Agency',
            style: 'header',
            margin: [40, 20, 0, 0]
          },
          {
            text: 'Your Trusted Real Estate Partner',
            style: 'subheader',
            alignment: 'right',
            margin: [0, 25, 40, 0]
          }
        ],
        background: '#2980b9'
      },

      content: [
        // Property Title
        {
          text: property.title || 'Beautiful Property',
          style: 'title',
          margin: [0, 20, 0, 10]
        },

        // Property Subtitle
        {
          text: `${property.type || 'Property'} ‚Ä¢ ${location}`,
          style: 'subtitle',
          margin: [0, 0, 0, 15]
        },

        // Price Badge
        {
          text: price,
          style: 'price',
          background: '#27ae60',
          color: 'white',
          margin: [0, 0, 0, 20]
        },

        // Property Details Table
        {
          text: 'Property Details',
          style: 'sectionHeader',
          margin: [0, 10, 0, 10]
        },
        {
          table: {
            widths: ['30%', '70%'],
            body: [
              ['Property Type:', property.type || 'N/A'],
              ['Location:', location],
              ['Surface Area:', property.surface ? `${property.surface} m¬≤` : property.area ? `${property.area} m¬≤` : 'N/A'],
              ['Bedrooms:', property.bedrooms || 'N/A'],
              ['Bathrooms:', property.bathrooms || 'N/A'],
              ['Status:', property.status || 'Available']
            ]
          },
          layout: {
            fillColor: function (rowIndex) {
              return (rowIndex % 2 === 0) ? '#f8f9fa' : null
            }
          },
          margin: [0, 0, 0, 20]
        },

        // Description (if available)
        ...(property.description ? [
          {
            text: 'Description',
            style: 'sectionHeader',
            margin: [0, 10, 0, 10]
          },
          {
            text: property.description,
            style: 'description',
            margin: [0, 0, 0, 20]
          }
        ] : []),

        // Contact Information
        {
          text: 'Contact Information',
          style: 'sectionHeader',
          margin: [0, 10, 0, 10]
        },
        {
          table: {
            widths: ['30%', '70%'],
            body: [
              ['üìû Phone:', agencyInfo.phone || '+212 600 000 000'],
              ['üìß Email:', agencyInfo.email || 'contact@leadestate.com'],
              ['üåê Website:', agencyInfo.website || 'www.leadestate.com'],
              ['üìç Address:', agencyInfo.address || 'Casablanca, Morocco']
            ]
          },
          layout: {
            fillColor: '#ecf0f1'
          },
          margin: [0, 0, 0, 20]
        }
      ],

      footer: {
        text: `Generated by LeadEstate CRM ‚Ä¢ ${new Date().toLocaleDateString()}`,
        alignment: 'center',
        style: 'footer',
        margin: [0, 10, 0, 0]
      },

      styles: {
        header: {
          fontSize: 20,
          bold: true,
          color: 'white'
        },
        subheader: {
          fontSize: 10,
          color: 'white'
        },
        title: {
          fontSize: 24,
          bold: true,
          color: '#2c3e50'
        },
        subtitle: {
          fontSize: 14,
          color: '#7f8c8d'
        },
        price: {
          fontSize: 16,
          bold: true,
          alignment: 'center',
          margin: [0, 8, 0, 8]
        },
        sectionHeader: {
          fontSize: 16,
          bold: true,
          color: '#2c3e50'
        },
        description: {
          fontSize: 11,
          lineHeight: 1.4,
          color: '#34495e'
        },
        footer: {
          fontSize: 9,
          color: '#7f8c8d'
        }
      }
    }
  }

  setupDocument(doc, property, agencyInfo) {
    // Set document properties
    doc.setProperties({
      title: `${property.title || 'Property'} - Brochure`,
      subject: 'Real Estate Property Information',
      author: agencyInfo.name || 'LeadEstate Agency',
      creator: 'LeadEstate CRM'
    })

    let y = 20

    // Header with agency branding
    doc.setFillColor(41, 128, 185) // Professional blue
    doc.rect(0, 0, 210, 25, 'F')

    // Agency name
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(20)
    doc.setFont('helvetica', 'bold')
    doc.text(agencyInfo.name || 'LeadEstate Agency', 20, 15)

    // Tagline
    doc.setFontSize(10)
    doc.setFont('helvetica', 'normal')
    doc.text('Your Trusted Real Estate Partner', 20, 20)

    y = 40

    // Property title
    doc.setTextColor(0, 0, 0)
    doc.setFontSize(24)
    doc.setFont('helvetica', 'bold')
    doc.text(property.title || 'Beautiful Property', 20, y)
    y += 10

    // Property subtitle
    doc.setFontSize(14)
    doc.setFont('helvetica', 'normal')
    doc.setTextColor(100, 100, 100)
    const location = property.address || property.city || property.location || 'Prime Location'
    doc.text(`${property.type || 'Property'} ‚Ä¢ ${location}`, 20, y)
    y += 15

    // Price badge
    doc.setFillColor(46, 204, 113) // Green background
    doc.roundedRect(20, y, 60, 12, 2, 2, 'F')
    doc.setTextColor(255, 255, 255)
    doc.setFontSize(16)
    doc.setFont('helvetica', 'bold')
    const price = property.price ? `$${parseInt(property.price).toLocaleString()}` : 'Price on Request'
    doc.text(price, 25, y + 8)
    y += 25

    // Property details table
    const details = [
      ['Property Type:', property.type || 'N/A'],
      ['Location:', location],
      ['Surface Area:', property.surface ? `${property.surface} m¬≤` : property.area ? `${property.area} m¬≤` : 'N/A'],
      ['Bedrooms:', property.bedrooms || 'N/A'],
      ['Bathrooms:', property.bathrooms || 'N/A'],
      ['Status:', property.status || 'Available']
    ]

    doc.autoTable({
      startY: y,
      head: [['Property Details', '']],
      body: details,
      theme: 'grid',
      headStyles: { fillColor: [41, 128, 185], textColor: 255, fontSize: 14, fontStyle: 'bold' },
      bodyStyles: { fontSize: 11 },
      columnStyles: { 0: { fontStyle: 'bold', cellWidth: 50 }, 1: { cellWidth: 100 } },
      margin: { left: 20, right: 20 }
    })

    y = doc.lastAutoTable.finalY + 20

    // Description
    if (property.description) {
      doc.setFontSize(16)
      doc.setFont('helvetica', 'bold')
      doc.setTextColor(0, 0, 0)
      doc.text('Description', 20, y)
      y += 10

      doc.setFontSize(11)
      doc.setFont('helvetica', 'normal')
      doc.setTextColor(60, 60, 60)

      const lines = doc.splitTextToSize(property.description, 170)
      lines.forEach(line => {
        doc.text(line, 20, y)
        y += 6
      })
      y += 10
    }

    // Contact information
    const contactData = [
      ['üìû Phone:', agencyInfo.phone || '+212 600 000 000'],
      ['üìß Email:', agencyInfo.email || 'contact@leadestate.com'],
      ['üåê Website:', agencyInfo.website || 'www.leadestate.com'],
      ['üìç Address:', agencyInfo.address || 'Casablanca, Morocco']
    ]

    doc.autoTable({
      startY: y,
      head: [['Contact Information', '']],
      body: contactData,
      theme: 'grid',
      headStyles: { fillColor: [52, 73, 94], textColor: 255, fontSize: 14, fontStyle: 'bold' },
      bodyStyles: { fontSize: 11 },
      columnStyles: { 0: { fontStyle: 'bold', cellWidth: 50 }, 1: { cellWidth: 100 } },
      margin: { left: 20, right: 20 }
    })

    // Footer
    const pageHeight = doc.internal.pageSize.height
    doc.setFillColor(41, 128, 185)
    doc.rect(0, pageHeight - 15, 210, 15, 'F')

    doc.setTextColor(255, 255, 255)
    doc.setFontSize(9)
    doc.setFont('helvetica', 'normal')
    const footerText = `Generated by LeadEstate CRM ‚Ä¢ ${new Date().toLocaleDateString()}`
    const textWidth = doc.getTextWidth(footerText)
    doc.text(footerText, (210 - textWidth) / 2, pageHeight - 5)
  }

  // Generate and download PDF file directly
  async downloadPDFFile(pdfDoc, filename) {
    try {
      // Direct PDF download using pdfmake
      pdfDoc.download(filename + '.pdf')
      return true
    } catch (error) {
      console.error('Error downloading PDF:', error)
      return false
    }
  }

  // Open print dialog for WhatsApp (legacy method)
  openPrintDialog(pdfDoc, filename) {
    // For WhatsApp, we'll just download the PDF
    return this.downloadPDFFile(pdfDoc, filename)
  }
}

// Default agency information
export const DEFAULT_AGENCY_INFO = {
  name: 'LeadEstate Agency',
  phone: '+212 600 000 000',
  email: 'contact@leadestate.com',
  website: 'www.leadestate.com',
  address: 'Casablanca, Morocco'
}

// Utility function to generate and download property PDF
export const downloadPropertyPDF = async (property, agencyInfo = DEFAULT_AGENCY_INFO) => {
  try {
    const generator = new PropertyPDFGenerator()
    const pdfDoc = await generator.generatePropertyPDF(property, agencyInfo)

    const filename = `${property.title || 'Property'}_Brochure`.replace(/[^a-zA-Z0-9]/g, '_')
    const success = await generator.downloadPDFFile(pdfDoc, filename)

    return success
  } catch (error) {
    console.error('Error downloading property PDF:', error)
    return false
  }
}

// Utility function to generate PDF for WhatsApp
export const generatePropertyPDFBlob = async (property, agencyInfo = DEFAULT_AGENCY_INFO) => {
  try {
    const generator = new PropertyPDFGenerator()
    const pdfDoc = await generator.generatePropertyPDF(property, agencyInfo)

    const filename = `${property.title || 'Property'}_Brochure`.replace(/[^a-zA-Z0-9]/g, '_')

    // For WhatsApp, we'll download the PDF and show instructions
    const success = await generator.downloadPDFFile(pdfDoc, filename)

    return { success, filename: filename + '.pdf' }
  } catch (error) {
    console.error('Error generating property PDF:', error)
    return { success: false, error }
  }
}
